<?xml version="1.0" encoding="UTF-8" ?>

<launch>
    <arg name="robot" default="X1"/>
    <arg name="world_name" default="simple_cave_03"/>
    <arg name="gt_mesh_file" default="$(find rpz_planning)/data/meshes/$(arg world_name).obj"/>
    <arg name="rviz" default="false"/>
    <arg name="do_eval" default="true"/>
    <arg name="do_metrics_record" default="true"/>
    <arg name="load_gt" default="true"/>
    <arg name="bag" default="explorer_x1_opt_path_true_simple_cave_03_intrins_rewards_hyps_ritz_2021-08-17-15-19-24.bag"/>
    <arg name="bag_path" default="$(find rpz_planning)/data/bags/mapping_eval/$(arg bag)"/>
    <arg name="bag_rate" default="4.0"/>
    <arg name="bag_start" default="0.0"/>
    <arg name="eval_rate" default="1.0"/>
    <arg name="gpu_id" default="0"/>
    <arg name="reward_cloud_as_input" default="true"/>

    <arg if="$(eval reward_cloud_as_input)" name="map_topic" default="rewards_accumulator/rewards_map"/>
    <arg unless="$(eval reward_cloud_as_input)" name="map_topic" default="map_accumulator/map"/>
    <arg if="$(eval load_gt)" name="actual_reward_topic" default="actual_rewarder/reward"/>
    <arg unless="$(eval load_gt)" name="actual_reward_topic" default="global_actual_reward"/>

    <param name="use_sim_time" value="true" />

    <!-- Workaround for /tf_static problems with rosbag: https://github.com/ros/geometry2/issues/181 -->
    <node name="play_tf_static" pkg="rpz_planning" type="play_tf_static"
         args="$(arg bag_path)" output="log">
        <remap from="~tf_static" to="/tf_static"/>
    </node>

    <!-- ROSBAG -->
    <node name="rosbag_play_rpz" pkg="rosbag" type="play" output="log"
          args="--clock --pause -s $(arg bag_start) -r $(arg bag_rate) $(arg bag_path)">
    </node>

    <group ns="$(arg robot)">
        <!-- Map accumulator node -->
        <include unless="$(eval reward_cloud_as_input)" file="$(dirname)/map_accumulator.launch">
            <arg name="cloud_topic" default="updated_map"/>
        </include>

        <!-- Map with Rewards accumulator node -->
        <include if="$(eval reward_cloud_as_input)" file="$(dirname)/rewards_accumulator.launch" pass_all_args="true">
            <arg name="reward_cloud_topic" value="reward_cloud"/>
            <arg name="pts_proximity_th" value="0.22"/>
        </include>

        <!-- Travelled distance publisher -->
        <include file="$(dirname)/travelled_dist.launch" pass_all_args="true">
            <arg name="route_wps_dist" value="2.0"/>
        </include>

        <!-- Exploration evaluation -->
        <node name="eval" pkg="rpz_planning" type="eval.py" output="screen">
            <rosparam subst_value="true">
                map_topic: $(arg map_topic)  <!-- Point cloud map constructed during exploration -->
                gt_mesh: $(arg gt_mesh_file) <!-- Path to .obj or .ply ground truth mesh file of the world -->
                world_name: $(arg world_name)
                do_points_sampling_from_mesh: True <!-- Whether to use points sampling method from mesh (True) or use mesh vertices (False) -->
                do_points_sampling_from_map: True <!-- Whether to subsample constructed map before metrics computation -->
                n_sample_points: 50000 <!-- Max number of sampled points that are used both from gt mesh and constructed map if above params are True -->
                do_eval: $(arg do_eval) <!-- Whether to run evaluation function or just see the constructed map -->
                load_gt: $(arg load_gt) <!-- Whether to load ground truth mesh of the environment -->
                coverage_dist_th: 0.5 <!-- Threshold value [m]: defines if a world mesh point is considered being covered -->
                artifacts_coverage_dist_th: 0.1 <!-- Threshold value [m]: defines if an artifact mesh point is considered covered -->
                artifacts_confirm_hyps_topic: "detection_localization/dbg_confirmed_hypotheses_pcl" <!-- Detections localization output to evaluate -->
                artifacts_hyps_topic: "detection_localization/dbg_hypotheses_pcl"
                actual_reward_topic: $(arg actual_reward_topic) <!-- Actual rewards topic: from constructed or gt rewards map -->
                detections_dist_th: 5.0 <!-- Threshold value [m]: defines if an artifact detection point is considered close to gt pose -->
                                        <!-- according to the rules: https://www.subtchallenge.com/resources/SubT_Challenge_Finals_Rules.pdf -->
                max_age: 300.0 <!-- Constructed map point cloud msg timestamp threshold: it wouldn't be processed if dt > age -->
                map_gt_frame: $(arg world_name) <!-- Ground truth world mesh frame: usually it is the same as world name in Subt simulator -->
                eval_rate: $(arg eval_rate) <!-- How frequent to perform evaluation -->
                record_metrics: $(arg do_metrics_record) <!-- Whether to record obtained metrics to .xls file -->
                metrics_xls_file: $(arg bag_path) <!-- Path to save metrics .xls file -->
                gpu_id: $(arg gpu_id) <!-- GPU device id -->
            </rosparam>
        </node>

        <!-- Actual reward calculation -->
        <include if="$(arg load_gt)" file="$(dirname)/actual_reward.launch" pass_all_args="true">
            <arg name="map_topic" value="eval/cloud_from_gt_mesh"/>
            <arg name="path_topic" value="travelled_dist_publisher/route"/>
            <arg name="publish_cloud" value="true"/>
            <arg name="rate" value="1.0"/>
        </include>
    </group>

    <!-- RVIZ -->
    <node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz"
          args="-d $(dirname)/../config/eval.rviz"/>

</launch>

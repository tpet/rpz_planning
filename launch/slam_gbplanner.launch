<?xml version="1.0" encoding="UTF-8" ?>
<launch>
    <!-- All settings -->
    <arg name="robot" default="X1"/>
    <arg name="robot_type" default="explorer_x1" doc="Robot type, from {absolem, dtr, explorer_x1, marv, x1, x2}."/>
    <arg name="robot_name" default="smb"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="rviz_en" default="true" />
    <arg name="launch_prefix" default=""/> <!-- gdb -ex run //args -->
    <param name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="odometry_topic" default="/odom"/>

    <!-- Config files -->
    <arg name="gbplanner_config_file" default="$(find rpz_planning)/config/$(arg robot_name)/gbplanner_config.yaml"/>
    <arg name="pci_file" default="$(find rpz_planning)/config/$(arg robot_name)/planner_control_interface_sim_config.yaml"/>
    <arg name="voxblox_config_file" default="$(find rpz_planning)/config/$(arg robot_name)/voxblox_sim_config.yaml"/>
    <arg name="map_config_file" default="$(arg voxblox_config_file)"/>

    <!-- Static TF -->
    <node pkg="tf" type="static_transform_publisher" name="tf_53" args="0 0 0 0 0 0 subt navigation 100" />

    <!-- Subt frame publisher-->
    <node name="subt_frame_publisher" pkg="subt_virtual" type="subt_frame_publisher">
        <param name="robot_name" value="$(arg robot)"/>
    </node>

    <!-- Robot ground truth frame publisher-->
    <node name="ground_truth_publisher" pkg="subt_virtual" type="ground_truth_publisher">
        <param name="robot_name" value="$(arg robot)" />
    </node>

    <!-- SLAM -->
    <group ns="$(arg robot)">
        <node if="0" name="map_to_subt_identity" pkg="tf" type="static_transform_publisher"
              args="0 0 0 0 0 0 subt $(arg robot)/map 0.1"/>
        <include file="$(find naex)launch/tf.launch" pass_all_args="true"/>
        <include file="$(find naex)launch/preproc.launch" pass_all_args="true"/>
        <include file="$(find naex)launch/odom.launch" pass_all_args="true"/>
        <include file="$(find naex)launch/slam.launch" pass_all_args="true">
            <arg if="$(eval robot_type == 'dtr')"
                 name="points_slow_filtered" value="points_filtered_batch"/>
        </include>
    </group>

    <group>
<!--         <node name="message_to_tf" pkg="smb_gazebo" type="message_to_tf" output="screen"> -->
<!--           <param name="odometry_topic" value="/odom"/> -->
<!--           <param name="frame_id" value="subt"/> -->
<!--           <param name="child_frame_id" value="/X1/base_link"/> -->
<!--           <param name="footprint_frame_id" value="/X1/base_footprint"/> -->
<!--         </node> -->

        <!-- Load controller configuration -->
<!--         <rosparam command="load" file="$(find rpz_planning)/config/smb_lowlevel_controller/control_sim.yaml" /> -->

        <!-- Spawn controllers -->
<!--         <node name="controller_spawner" pkg="controller_manager" type="spawner" args="smb_joint_publisher smb_velocity_controller"/> -->

<!--         <node pkg="twist_mux" type="twist_mux" name="twist_mux"> -->
<!--           <rosparam command="load" file="$(find rpz_planning)/config/smb_lowlevel_controller/twist_mux.yaml" /> -->
<!--           <remap from="cmd_vel_out" to="smb_velocity_controller/cmd_vel"/> -->
<!--         </node> -->

        <!-- Spawn human control nodes -->
<!--         <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server" output="screen"/> -->

        <!-- Path tracker -->
        <node name="smb_path_tracker_node" pkg="smb_path_tracker" type="smb_path_tracker_ros_node" output="screen">
            <remap from="cmd_vel" to="cmd_vel" />
            <remap from="odometry" to="/odom" />
            <param name="critical_angle" value="0.52"/>
            <param name="max_ang_vel" value="0.5"/>
            <param name="desired_vel" value="0.5"/>
            <param name="look_ahead_error_margin" value="0.2"/>
            <param name="look_ahead_distance" value="0.5"/>
        </node>
    </group>

    <!-- Odometry provider from tfs -->
    <node name="odometry_provider" pkg="nav_utils" type="tf_to_odom">
        <param name="parent_frame" value="subt" />
        <param name="child_frame" value="$(arg robot)/base_footprint" />
        <param name="no_wait_frame" value="$(arg robot)/odom" />
        <param name="timer_freq" value="50" />
    </node>

    <node pkg="topic_tools" type="relay" name="vlp_relay" args="$(arg robot)/points /input_pointcloud" />
    <node pkg="topic_tools" type="relay" name="front_rgbd_relay" args="$(arg robot)/front_rgbd/points /input_pointcloud" />
<!--     <node pkg="topic_tools" type="relay" name="rear_rgbd_relay" args="$(arg robot)/rear_rgbd/points /input_pointcloud" /> -->
<!--     <node pkg="topic_tools" type="relay" name="right_rgbd_relay" args="$(arg robot)/right_rgbd/points /input_pointcloud" /> -->
<!--     <node pkg="topic_tools" type="relay" name="left_rgbd_relay" args="$(arg robot)/left_rgbd/points /input_pointcloud" /> -->

<!--     <node name="pose_throttler" type="throttle" pkg="topic_tools" args="messages $(arg robot_name)/ground_truth/pose_with_covariance 10 /msf_core/pose" /> -->

    <!-- Graph based planning -->
    <node pkg="gbplanner" type="gbplanner_node" name="gbplanner_node" output="screen" launch-prefix="$(arg launch_prefix)">
        <remap from="odometry" to="$(arg odometry_topic)" />
        <remap from="/pointcloud" to="/input_pointcloud" />
        <rosparam command="load" file="$(arg gbplanner_config_file)" />
        <rosparam command="load" file="$(arg map_config_file)" />
    </node>

    <!-- Planner and Control Interface -->
    <node pkg="pci_general" type="pci_general_ros_node" name="pci_general_ros_node" output="screen">
        <remap from="command/trajectory" to="$(arg robot_name)/command/trajectory" />
        <remap from="planner_server" to="gbplanner" />
        <remap from="planner_homing_server" to="gbplanner/homing" />
        <remap from="odometry" to="$(arg odometry_topic)"/>
        <param name="world_frame_id" value="subt" />
    </node>

    <!-- RVIZ -->
    <node if="$(arg rviz_en)" pkg="rviz" type="rviz" name="gbplanner_ui" output="screen" args="-d $(find rpz_planning)/config/smb.rviz"/>

</launch>

<launch>
  <!-- All settings -->
  <arg name="robot_name" default="smb"/>
  <arg name="gazebo_gui_en" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="rviz_en" default="true" />
  <arg name="launch_prefix" default=""/> <!-- gdb -ex run //args -->
  <param name="use_sim_time" value="$(arg use_sim_time)"/>

  <!-- Config files -->
  <arg name="gbplanner_config_file" default="$(find gbplanner)/config/$(arg robot_name)/gbplanner_config.yaml"/>
  <arg name="pci_file" default="$(find gbplanner)/config/$(arg robot_name)/planner_control_interface_sim_config.yaml"/>
  <arg name="voxblox_config_file" default="$(find gbplanner)/config/$(arg robot_name)/voxblox_sim_config.yaml"/>
  <arg name="map_config_file" default="$(arg voxblox_config_file)"/>
<!--   <arg name="world_file" default="$(find planner_gazebo_sim)/worlds/niosh_osrf.world"/> -->
<!--   <arg name="world_file" default="$(find planner_gazebo_sim)/worlds/darpa_cave_01.world"/> -->
  <arg name="world_file" default="$(find planner_gazebo_sim)/worlds/darpa_cave_02.world"/>
<!--   <arg name="world_file" default="$(find planner_gazebo_sim)/worlds/darpa_subt_final_circuit.world"/> -->
<!--   <arg name="world_file" default="$(find planner_gazebo_sim)/worlds/pittsburgh_mine.world"/> -->
<!--   <arg name="world_file" default="$(find gazebo_cave_world)/worlds/cave_world.world"/> -->

<!--   <arg name="odometry_topic" default="/ground_truth/state"/> -->
    <arg name="odometry_topic" default="/odom"/>

  <!-- Static TF -->
  <node pkg="tf" type="static_transform_publisher" name="tf_53" args="0 0 0 0 0 0 world navigation 100" />

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find planner_gazebo_sim)/models:$(find subt_cave_sim)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(arg world_file)"/>
		<arg name="paused" value="false"/>
		<arg name="use_sim_time" value="true"/>
		<arg name="gui" value="$(arg gazebo_gui_en)"/>
		<arg name="headless" value="false"/>
		<arg name="debug" value="false"/>
    <arg name="verbose" value="false"/>
	</include>

  <include file="$(find smb_gazebo)/launch/spawn_smb.launch">
    <arg name="joystick" value="false"/>
    <arg name="odom_to_tf" value="false"/>
    <arg name="x" value="0.0" />
    <arg name="y" value="0.0" />
    <arg name="z" value="0.5" />
    <arg name="yaw" default="0.0"/>
  </include>

  <!-- CTU pipeline -->
  <node if="1" name="map_to_world_identity" pkg="tf" type="static_transform_publisher"
      args="0 0 0 0 0 0 world map 0.1"/>
  <include file="$(find naex)/launch/preproc.launch" pass_all_args="true">
    <arg name="points" value="velodyne_points"/>
  </include>

  <node name="odom_setter" pkg="subt_virtual" type="odom_setter">
        <rosparam>
            pose_cov_diag: [.1, .1, .1, .1, .1, .1]
            twist_cov_diag: [.1, .1, .1, .1, .1, .1]
        </rosparam>
        <remap from="input" to="/smb_velocity_controller/odom"/>
        <remap from="output" to="uncertain_odom"/>
    </node>
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
        <param name="output_frame" value="odom"/>
        <param name="base_footprint_frame" value="base_link"/>
        <param name="freq" value="20.0"/>
        <param name="sensor_timeout" value="1.0"/>
        <param name="odom_used" value="true"/>
        <param name="imu_used" value="false"/>
        <param name="vo_used" value="false"/>

        <remap from="odom" to="uncertain_odom"/>
        <remap from="imu_data" to="imu/data"/>
        <remap from="~odom_combined" to="odom_ekf"/>
    </node>

  <include file="$(find naex)/launch/slam.launch" pass_all_args="true">
     <arg name="robot" value=""/>
     <arg name="points" value="velodyne_points_slow_filtered"/>
<!--      <arg name="points" value="lidar_front_points_slow_filtered"/>-->
   </include>
   <!-- Odometry provider from tfs -->
    <node name="odometry_provider" pkg="nav_utils" type="tf_to_odom">
        <param name="parent_frame" value="world" />
        <param name="child_frame" value="base_link" />
<!--         <param name="no_wait_frame" value="icp_odom" /> -->
        <param name="timer_freq" value="50" />
    </node>

    <!-- Path tracker -->
  <include file="$(find smb_path_tracker)/launch/pure_pursuit_tracker.launch">
    <arg name="odometry_topic" value="$(arg odometry_topic)"/>
  </include>

  <node pkg="topic_tools" type="relay" name="vlp_relay" args="/velodyne_points /input_pointcloud" />
  <node pkg="topic_tools" type="relay" name="front_lidar_relay" args="/lidar_front_points /input_pointcloud" />

<!--   <node name="pose_throttler" type="throttle" pkg="topic_tools" args="messages $(arg robot_name)/ground_truth/pose_with_covariance 10 /msf_core/pose" /> -->
<!--   Graph based planning -->
  <node pkg="gbplanner" type="gbplanner_node" name="gbplanner_node" output="screen" launch-prefix="$(arg launch_prefix)">
    <remap from="odometry" to="$(arg odometry_topic)" />
    <remap from="/pointcloud" to="/input_pointcloud" />
    <rosparam command="load" file="$(arg gbplanner_config_file)" />
    <rosparam command="load" file="$(arg map_config_file)" />
  </node>

<!--   Planner and Control Interface -->
  <node pkg="pci_general" type="pci_general_ros_node" name="pci_general_ros_node" output="screen">
    <remap from="command/trajectory" to="$(arg robot_name)/command/trajectory" />
    <remap from="planner_server" to="gbplanner" />
    <remap from="planner_homing_server" to="gbplanner/homing" />
    <remap from="odometry" to="$(arg odometry_topic)"/>
    <rosparam command="load" file="$(arg pci_file)" />
  </node>

  <!-- Get local map from global -->
<!--   <node name="local_map_provider" pkg="cloud_proc" type="cloud_proc" output="screen"> -->
<!--         <rosparam param="filters" subst_value="true"> -->
<!--             - cloud_proc.DiscardOld: -->
<!--                 max_age: 100.0 -->
<!--             - cloud_proc.Box: -->
<!--                 keep: 1 -->
<!--                 lower: [-13.0, -13.0, -5.0] -->
<!--                 upper: [ 13.0,  13.0,  10.0] -->
<!--                 fields: ["x", "y", "z"] -->
<!--                 timeout: 1.0 -->
<!--                 frame: base_stabilized -->
<!--         </rosparam> -->
<!--         <remap from="in" to="/gbplanner_node/surface_pointcloud"/> -->
<!--         <remap from="out" to="/local_map"/> -->
<!--     </node> -->

  <!-- RPZ predictor: traversability -->
<!--   <node name="box_filter" pkg="cloud_proc" type="cloud_proc" output="log"> -->
<!--         <rosparam param="filters" subst_value="true"> -->
<!--             - cloud_proc.DiscardOld: -->
<!--                 max_age: 5.0 -->
<!--             - cloud_proc.Box: -->
<!--                 keep: 1 -->
<!--                 lower: [-13.0, -13.0, -1.5] -->
<!--                 upper: [ 13.0,  13.0,  1.0] -->
<!--                 fields: ["x", "y", "z"] -->
<!--                 timeout: 1.0 -->
<!--                 frame: base_stabilized -->
<!--         </rosparam> -->
<!--         <remap from="in" to="/input_pointcloud"/> -->
<!--         <remap from="out" to="/dynamic_point_cloud_bigbox"/> -->
<!--     </node> -->
<!--     <node name="rpz_front_rgbd_points_voxels" pkg="nodelet" type="nodelet" args="standalone pcl/VoxelGrid" output="log"> -->
<!--         <rosparam subst_value="true"> -->
<!--             leaf_size: 0.1 -->
<!--             filter_field_name: "" -->
<!--         </rosparam> -->
<!--         <remap from="~input" to="/dynamic_point_cloud_bigbox"/> -->
<!--         <remap from="~output" to="/dynamic_point_cloud_bigbox_filtered"/> -->
<!--     </node> -->
<!--     <node name="traversability_predictor" pkg="dem_predictor" type="whole_pipeline.py" output="log"> -->
<!--         <param name="highres_z" value="True"/> -->
<!--         <param name="threshold_output" value="False"/> -->
<!--         <param name="map_frame" value="world"/> -->
<!--         <param name="baselink_frame" value="base_footprint"/> -->
<!--         <param name="pc_topic" value="/dynamic_point_cloud_bigbox_filtered"/> -->
<!--         <param name="confidence_threshold" value="-3"/> -->
<!--         <param name="s2d_path" value="$(find dem_predictor)/data/net_weights_velo_s2d"/> -->
<!--         <param name="d2rpz_path" value="$(find dem_predictor)/data/net_weights_d2rpz"/> -->
<!--         <param name="gpu_id" value="$(arg gpu_id)"/> -->
<!--     </node> -->

    <!-- RPZ planning: trajectory optimization -->
<!--     <node name="rpz_planner" pkg="rpz_planning" type="rpz_planner" output="screen"> -->
<!--         <rosparam subst_value="true"> -->
<!--             map_frame: world -->
<!--             robot_frame: base_footprint -->
<!--             max_age: 1.0 -->
<!--             debug: true -->
<!--             num_cameras: 1 -->
<!--             num_iters: 25 -->
<!--             map_step: 2 -->
<!--             path_step: 2 -->
<!--             linear_speed: 1.0 -->
<!--             angular_speed: 1.0 -->
<!--             fixed_endpoints: ['start'] -->
<!--             dist_weight: 1.06 -->
<!--             trav_weight: 1.08 -->
<!--             turn_weight: 0.24 -->
<!--         </rosparam> -->

<!--         <rosparam if="$(eval robot_name == 'smb')"> -->
<!--             num_cameras: 3 -->
<!--         </rosparam> -->

<!--          --><!-- smb cameras topics -->
<!--         <remap if="$(eval 'smb' in robot_name.lower())" -->
<!--                from="camera_info_0" to="/rgb_cam_front/camera_info"/> -->
<!--         <remap if="$(eval 'smb' in robot_name.lower())" -->
<!--                from="camera_info_1" to="/rgb_cam_left/camera_info"/> -->
<!--         <remap if="$(eval 'smb' in robot_name.lower())" -->
<!--                from="camera_info_2" to="/rgb_cam_right/camera_info"/> -->

<!--         <remap from="map" to="/input_pointcloud"/> -->
<!--         <remap from="path" to="path"/> -->
<!--         <remap from="rpz" to="/traversability"/> -->
<!--     </node> -->

    <node if="$(arg rviz_en)" pkg="rviz" type="rviz" name="gbplanner_ui" output="screen" args="-d $(find gbplanner)/config/rviz/smb.rviz"/>

</launch>
